{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">speed1</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"></block><block type=\"v5_events_when_started\" id=\"qJh76/Igg@XG|V=YHyfW\" x=\"450\" y=\"170\"></block><block type=\"v5_events_when_driver\" id=\"ff!1Hq9]rpx@PADe6s2d\" x=\"190\" y=\"330\"><next><block type=\"v5_control_if_then\" id=\"4?9`dU,5$_nyQ5!4NM-^\"></block></next></block><block type=\"v5_events_when_controller_button\" id=\"tabk6.U_I,K#9]5ZC1bD\" x=\"210\" y=\"630\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"v5_events_when_controller_axis\" id=\"*b_Cu${tM6I_{C*]b$Mv\" x=\"190\" y=\"790\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis1</field><next><block type=\"v5_variables_set_variable\" id=\"LCFMW2{[G#$_Ge$}9Pt8\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\" variabletype=\"\">speed1</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"`M/4i8y~qFWV@q_S^@?Q\"><field name=\"NUM\">0</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"fCV`x7HAAJjc`D=PncZm\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis1</field></block></value></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat speed1;\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  if (false) {\n  }\n  return 0;\n}\n\n// \"when Controller1 ButtonUp pressed\" hat block\nvoid onevent_Controller1ButtonUp_pressed_0() {\n}\n\n// \"when Controller1 Axis1 changed\" hat block\nvoid onevent_Controller1Axis1Changed_0() {\n  speed1 = Controller1.Axis1.position();\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonUp.pressed(onevent_Controller1ButtonUp_pressed_0);\n  Controller1.Axis1.changed(onevent_Controller1Axis1Changed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}